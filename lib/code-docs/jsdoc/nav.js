'use strict';

const NavNode = require('../nav-node');
const { slugify } = require('../../helpers');

/**
 * Methods to build a navigation for JSDoc.
 */
class JsDocNav {

    /**
     * @param {JsDoc} JsDoc - Raw json doclets generated by JSDoc.
     * @returns {NavNode[]} A navigation composing an array of sub-navigations e.g. [{title, items: [{title, link}]}]
     */
    static createNavigation(JsDoc) {
        const nav = [];
        const nodes = JsDoc.getNodes();
        // Add important doclets to the root of the nav with subnavs.
        // E.g. add classes with funciton and proeprties as a subnav.
        const jsDocByTypeWithMembers = JsDoc.getNodesByTypeWithMembers();
        const docletGroups = [
            { 'name': 'classes', 'subGroups': ['functions', 'properties'] },
            { 'name': 'modules', 'subGroups': ['classes', 'functions', 'properties'] }];
        docletGroups.forEach(docletGroup => {
            if (jsDocByTypeWithMembers[docletGroup.name]) {
                jsDocByTypeWithMembers[docletGroup.name].forEach((node) => {
                    const navnode = new NavNode(node.name);
                    const subnav = createSubNav(
                        `${node.name}`,
                        [node].concat(...docletGroup.subGroups.map(name => node[name]))
                    );
                    subnav.getItems().forEach((item) => navnode.addItem(item));
                    nav.push(navnode);
                });
            }
        });
        // Add events to nav, ignoring their hierarchy.
        // I.e. Surface events which are not in the global scope.
        const eventNodes = nodes.filter(node => node.kind === 'event');
        if (eventNodes.length > 0) {
            nav.push(createSubNav('Events', eventNodes));
        }
        // Add global nodes which are not already added to the nav.
        const globalNodes = nodes.filter(node => node.memberof === undefined && ['class', 'module', 'events', 'typedef'].includes(node.kind) === false);
        if (globalNodes.length > 0) {
            nav.push(createSubNav('Global', globalNodes));
        }
        return nav;
    }
}

/**
 * @param {string} title - The title of the subnav.
 * @param {Object[]} nodes - Formatted JS doclets to link to from the sub-navigation.
 * @returns {NavNode} A sub-navigation e.g. {title, items: [{title, link}]}
 * @access private
 */
function createSubNav(title, nodes) {
    nodes = nodes || [];
    const items = nodes.filter(node => node).map((node) => {
        let title = `${node.label}: ${node.name}`;
        if (node.kind === 'class' && node.memberof === undefined) {
            title = 'Constructor & Overview';
        }
        if (node.kind === 'module' && node.memberof === undefined) {
            title = 'Overview';
        }
        return new NavNode(title, `#${slugify(node.longname)}`);
    });
    return new NavNode(title, items);
}

module.exports = JsDocNav;
